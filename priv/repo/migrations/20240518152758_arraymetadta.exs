defmodule Demo.Repo.Migrations.Arraymetadta do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:users, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
      add(:first_name, :text)
      add(:last_name, :text)
      add(:metadata, :map)
      add(:representative, :boolean)
      add(:admin, :boolean, null: false, default: false)
      add(:api_key, :text)
      add(:date_of_birth, :date)
      add(:profile, :map)
      add(:alternate_profiles, {:array, :map})
      add(:type, :text, default: "type1")
      add(:types, {:array, :text})
      add(:tags, {:array, :text})
      add(:org, :text)

      add(:inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )
    end

    create(
      unique_index(:users, [:org, :first_name, :last_name],
        where: "representative = true",
        name: "users_representative_name_index"
      )
    )

    create table(:tickets, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
      add(:subject, :text, null: false)
      add(:metadata, {:array, :map})
      add(:description, :text)
      add(:response, :text)
      add(:status, :text, null: false, default: "new")

      add(:inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(
        :reporter_id,
        references(:users,
          column: :id,
          name: "tickets_reporter_id_fkey",
          type: :uuid,
          prefix: "public"
        )
      )

      add(
        :representative_id,
        references(:users,
          column: :id,
          name: "tickets_representative_id_fkey",
          type: :uuid,
          prefix: "public"
        )
      )

      add(:organization_id, :uuid, null: false)
    end

    create table(:ticket_links, primary_key: false) do
      add(:type, :text, null: false)

      add(
        :source_id,
        references(:tickets,
          column: :id,
          name: "ticket_links_source_id_fkey",
          type: :uuid,
          prefix: "public"
        ),
        primary_key: true,
        null: false
      )

      add(
        :destination_id,
        references(:tickets,
          column: :id,
          name: "ticket_links_destination_id_fkey",
          type: :uuid,
          prefix: "public"
        ),
        primary_key: true,
        null: false
      )
    end

    create table(:ticket_comments, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
      add(:comment, :text)

      add(
        :resource_id,
        references(:tickets, column: :id, name: "ticket_comments_resource_id_fkey", type: :uuid),
        null: false
      )

      add(
        :commenting_customer_id,
        references(:users,
          column: :id,
          name: "ticket_comments_commenting_customer_id_fkey",
          type: :uuid,
          prefix: "public"
        )
      )

      add(
        :commenting_representative_id,
        references(:users,
          column: :id,
          name: "ticket_comments_commenting_representative_id_fkey",
          type: :uuid,
          prefix: "public"
        )
      )
    end

    create table(:representative_comments, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
      add(:comment, :text)

      add(
        :resource_id,
        references(:users,
          column: :id,
          name: "representative_comments_resource_id_fkey",
          type: :uuid
        ),
        null: false
      )

      add(
        :commenting_customer_id,
        references(:users,
          column: :id,
          name: "representative_comments_commenting_customer_id_fkey",
          type: :uuid,
          prefix: "public"
        )
      )

      add(
        :commenting_representative_id,
        references(:users,
          column: :id,
          name: "representative_comments_commenting_representative_id_fkey",
          type: :uuid,
          prefix: "public"
        )
      )
    end

    create table(:organizations, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
    end

    alter table(:tickets) do
      modify(
        :organization_id,
        references(:organizations,
          column: :id,
          name: "tickets_organization_id_fkey",
          type: :uuid,
          prefix: "public"
        )
      )
    end

    alter table(:organizations) do
      add(:name, :text)
    end
  end

  def down do
    alter table(:organizations) do
      remove(:name)
    end

    drop(constraint(:tickets, "tickets_organization_id_fkey"))

    alter table(:tickets) do
      modify(:organization_id, :uuid)
    end

    drop(table(:organizations))

    drop(constraint(:representative_comments, "representative_comments_resource_id_fkey"))

    drop(
      constraint(:representative_comments, "representative_comments_commenting_customer_id_fkey")
    )

    drop(
      constraint(
        :representative_comments,
        "representative_comments_commenting_representative_id_fkey"
      )
    )

    drop(table(:representative_comments))

    drop(constraint(:ticket_comments, "ticket_comments_resource_id_fkey"))

    drop(constraint(:ticket_comments, "ticket_comments_commenting_customer_id_fkey"))

    drop(constraint(:ticket_comments, "ticket_comments_commenting_representative_id_fkey"))

    drop(table(:ticket_comments))

    drop(constraint(:ticket_links, "ticket_links_source_id_fkey"))

    drop(constraint(:ticket_links, "ticket_links_destination_id_fkey"))

    drop(table(:ticket_links))

    drop(constraint(:tickets, "tickets_reporter_id_fkey"))

    drop(constraint(:tickets, "tickets_representative_id_fkey"))

    drop(table(:tickets))

    drop_if_exists(
      unique_index(:users, [:org, :first_name, :last_name],
        name: "users_representative_name_index"
      )
    )

    drop(table(:users))
  end
end
